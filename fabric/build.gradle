//file:noinspection GrDeprecatedAPIUsage
plugins {
    id 'com.github.johnrengelman.shadow'
    id 'org.jetbrains.kotlin.jvm'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven { url 'https://maven.blamejared.com' }

    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    mavenCentral()
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    modImplementation("net.fabricmc:fabric-language-kotlin:${fabric_lang_kt_version}")
//    modImplementation "vazkii.patchouli:Patchouli:${patchouli_version}-FABRIC"

//    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"

    modImplementation "dev.architectury:architectury-fabric:${architectury_api_version}"

    // compile against the JEI API but do not include it at runtime
//    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")
    // at runtime, use the full JEI jar for Fabric
//    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
kotlin {
    jvmToolchain(21)
}
