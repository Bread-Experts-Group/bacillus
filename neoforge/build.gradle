//file:noinspection GrDeprecatedAPIUsage
plugins {
    id 'com.github.johnrengelman.shadow'
    id 'org.jetbrains.kotlin.jvm'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

//loom {
//    runs {
//        client {
//            client()
//            programArgs.addAll((String[]) ['--username', 'PizzaTime65', '--uuid', '30cdf636-82ed-47ee-9a9c-4d820c0d76a9'])
//        }
//    }
//}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = "Kotlin for Forge"
        setUrl("https://thedarkcolour.github.io/KotlinForForge/")
    }

    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }

    maven { url 'https://maven.blamejared.com' }
    mavenCentral()
}

dependencies {
    neoForge "net.neoforged:neoforge:${neoforge_version}"

//    runtimeOnly "vazkii.patchouli:Patchouli:${patchouli_version}-NEOFORGE"

    modImplementation "dev.architectury:architectury-neoforge:${architectury_api_version}"
    implementation "thedarkcolour:kotlinforforge-neoforge:${kff_version}" exclude group: 'net.neoforged.fancymodloader', module: 'loader'

    // compile against the JEI API but do not include it at runtime
//    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    // at runtime, use the full JEI jar for NeoForge
//    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
kotlin {
    jvmToolchain(21)
}
